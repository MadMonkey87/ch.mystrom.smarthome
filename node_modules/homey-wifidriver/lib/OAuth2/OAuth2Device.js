'use strict';

const WebAPIDevice = require('./../WebAPI/WebAPIDevice');

/**
 * The OAuth2Device class exposes the getOAuth2Account method.
 * @extends WebAPIDevice
 * @example
 *
 * const OAuth2Device = require('homey-wifidriver').OAuth2Device;
 *
 * class myDevice extends OAuth2Device {
 *
 *  sync onInit() {
 *      await super.onInit()
 *          .catch(err => this.error(err));
 *
 *      // this.oauth2Account contains authenticated OAuth2Account instance
 *
 *      // all api calls will be injected with 'Authorization: Bearer <access_token>' from OAuth2Account instance
 *      this.apiGetCall({uri: 'http://example.api.com/status'})
 *          .then(res => {
 *              this.log(res);
 *          });
 *  }
 *
 *  onDeleted() {
 *      super.onDeleted();
 *  }
 * }
 */
class OAuth2Device extends WebAPIDevice {

	/**
	 * Method that initializes device with OAuth2Account instance and authenticated API call methods.
	 * @param options
	 * @returns {Promise}
	 */
	async onInit(options = {}) {
		await super.onInit(options)
			.catch(err => {
				this.error('Error: WebAPIDevice onInit', err);
				return Promise.reject();
			});

		this.log('init OAuth2Device');

		// Get temporary OAuth2 account from store if device was just added, else use the permanently added OAuth2 account
		const storedOAuth2Account = this.getStoreValue('tempOAuth2Account') || this.getStoreValue('oauth2Account');
		if (!storedOAuth2Account) this.log('warning: creating empty oauth2account, nothing found in memory');
		if (storedOAuth2Account) storedOAuth2Account.oauth2Device = this;
		this.oauth2Account = this.getDriver().oauth2Client.createAccount(storedOAuth2Account || { oauth2Device: this });

		// Store OAuth2 account permanently for this device
		await this.setStoreValue('oauth2Account', this.oauth2Account.getStoreValues());

		// Remove temporary OAuth2 account
		this.unsetStoreValue('tempOAuth2Account');

		// Set authorization header
		this.setDefaultHeaders({
			Authorization: `Bearer ${this.oauth2Account.accessToken}`,
		});

		// Listener for refresh event, then update authorization headers
		this.oauth2Account.on('tokens', tokens => {
			this.log('tokens event -> update store', tokens);
			const storeValues = this.oauth2Account.getStoreValues();

			// TODO stringify expiresIn as setStoreValue won't accept Date object (yet), remove when fixed in SDKv2
			storeValues.expiresIn = `${storeValues.expiresIn}`;
			this.setStoreValue('oauth2Account', storeValues)
				.then(() => this.log('saved oauth2account in store'))
				.catch(err => this.error('failed to save oauth2account in store', err, this.oauth2Account.getStoreValues()));

			this.setDefaultHeaders({
				Authorization: `Bearer ${this.oauth2Account.accessToken}`,
			});
		});
	}

	/**
	 * Method that will be called when device is deleted, it will delete its OAuth2Account from the client.
	 * TODO when multiple OAuth2Accounts are allowed do not directly remove, but check if other devices use this account as well.
	 */
	onDeleted() {
		this.log('onDeleted() -> OAuth2Device');
		this.getDriver().oauth2Client.deleteAccount(this.oauth2Account);
		super.onDeleted();
	}

	/**
	 * Overridable method that will be called as middleware upon a failed API request.
	 * @param err
	 */
	webAPIErrorHandler(err) {

		// Handle unauthorized error
		if (err.statusCode === 401 || err.statusCode === '401') {
			this.log('unauthorized, try refreshing');

			this.oauth2Account.refreshAccessTokens({
				priority: true,
				retryOnFail: true,
				ignoreError: true,
			}).catch(() => super.webAPIErrorHandler(err));
		}

		// Pass down the error
		if (typeof super.webAPIErrorHandler === 'function') super.webAPIErrorHandler(err);
	}
}

module.exports = OAuth2Device;
