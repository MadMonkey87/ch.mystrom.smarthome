'use strict';

const request = require('request-promise-native');

const WifiDriver = require('./../WifiDriver');
const WebAPIMixin = require('./../WebAPI/WebAPIMixin');
const PromiseQueue = require('./../Util/PromiseQueue');

/**
 * The {@link WebAPIDriver} class exposes methods useful for WebAPIDrivers. It creates an API call queue
 * and methods to communicate with an API.
 * @extends WifiDriver
 * @example
 *
 * const WebAPIDriver = require('homey-wifidriver').WebAPIDriver;
 *
 * class myDriver extends WebAPIDriver {
 *  onInit(options){
 *      super.onInit(options);
 *
 *      this.setDefaultBaseUrl('http://example.api.com/');
 *      this.setDefaultHeaders({Authorization: `Bearer ${Homey.ManagerSettings.get('accessToken')}`});
 *  }
 *
 *  onPairListDevices(){
 *      return this.apiCallGet({uri: '/list/devices'});
 *  }
 * }
 */
class WebAPIDriver extends WebAPIMixin(WifiDriver) {

	/**
	 * This method needs to be called from a driver, it will create a {@link PromiseQueue} that will be used
	 * for queueing, throttling and rate limiting api calls.
	 * @param {Object} options
	 * @param {string} [options.apiBaseUrl] - Url used for making api calls
	 * @param {number} [options.throttle] - Throttle value, time in ms between api calls
	 * @param {number} [options.rateLimit]
	 * @param {number} [options.rateLimit.max] - Maximum number of api calls per time unit
	 * @param {number} [options.rateLimit.per] - Time unit in ms
	 */
	onInit(options = {}) {
		super.onInit(options);

		this._request = request;
		this._baseUrl = options.apiBaseUrl || '';
		this._requestDefaultHeaders = options.defaultHeaders || {};

		// Abort queue if it was created before
		if (typeof this._apiCallQueue !== 'undefined') this._apiCallQueue.abort();
		this._apiCallQueue = new PromiseQueue({
			throttle: options.throttle || 0,
			rateLimit: options.rateLimit,
		});
	}
}

module.exports = WebAPIDriver;
