'use strict';

const WebAPIError = require('./WebAPIError');
const WebAPIClientError = require('./WebAPIClientError');
const WebAPIServerError = require('./WebAPIServerError');

class WebAPIUtil {

	/**
	 * Method that will perform a request.
	 * @param {Object} options
	 * @param {string} [options.uri] - Valid uri, or relative uri to apiBaseUrl
	 * @param {boolean} [options.priority] - If API call needs to skip rate limited and throttled queue
	 * @param {boolean} [options.retryOnFail = false] - When API call fails, retry once
	 * @param {string} [options.method] - GET, POST, PUT, DELETE
	 * @param {boolean} [options.json=true] - Parse response as JSON
	 * @param {Object} [options.headers] - Headers to be added to the request (will merge with default headers)
	 * @param {PromiseQueue} queue - Used for queuing api calls
	 * @param {Request} request - Request instance, used with defaults
	 * @returns {Promise}
	 */
	static apiCall(options = {}, queue, request) {
		if (!options.hasOwnProperty('json') && options.method === 'GET' || options.method === 'DEL') {
			options.json = true;
		}
		if (!options.hasOwnProperty('retryOnFail') || typeof options.retryOnFail === 'undefined') {
			options.retryOnFail = false;
		}

		return queue.add(() => request(options)
				.catch(err => {

					// Check if retry on fail is enabled
					if (options.retryOnFail === true) {

						// Make sure to not end up in a loop
						options.retryOnFail = false;
						return WebAPIUtil.apiCall(options, queue, request);
					}
					throw err;
				})
				.catch(WebAPIUtil.processErrorResponse.bind(this)),
			{
				priority: options.priority,
			});
	}

	/**
	 * Method that will process incoming request error into usable Error format.
	 * @param err
	 * @private
	 */
	static processErrorResponse(err) {
		if (err.statusCode >= 400 && err.statusCode < 500) {
			throw new WebAPIClientError(err.message, {
				statusCode: err.statusCode,
				requestOptions: err.options,
				errorResponse: err.error,
			});
		} else if (err.statusCode >= 500) {
			throw new WebAPIServerError(err.message, {
				statusCode: err.statusCode,
				requestOptions: err.options,
				errorResponse: err.error,
			});
		} else {
			throw new WebAPIError(err.message, {
				statusCode: err.statusCode,
				requestOptions: err.options,
				errorResponse: err.error,
			});
		}
	}
}

module.exports = WebAPIUtil;
