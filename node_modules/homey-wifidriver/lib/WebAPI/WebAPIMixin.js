'use strict';

const url = require('url');

const _ = require('underscore');

const WebAPIUtil = require('./WebAPIUtil');

const WebAPIMixin = (superclass) => class extends superclass {

	/**
	 * Method that sets a default base ur.
	 * @param {string} baseUrl - Base url, e.g.; http://example.api.com/
	 */
	setDefaultBaseUrl(baseUrl) {
		this._baseUrl = baseUrl;
	}

	/**
	 * Method that sets a default header on the request object. Useful for setting authorization headers.
	 * @param {Object} headerObj - Object that will be set as default headers property
	 */
	setDefaultHeaders(headerObj) {
		this._requestDefaultHeaders = headerObj;
	}

	/**
	 * Method that will perform a request.
	 * @param {Object} options
	 * @param {string} [options.uri] - Valid uri, or relative uri to apiBaseUrl
	 * @param {boolean} [options.priority] - If API call needs to skip rate limited and throttled queue
	 * @param {boolean} [options.retryOnFail] - When API call fails, retry once
	 * @param {boolean} [options.ignoreError] - When API call fails, do not call webApiErrorHandler (prevent loops)
	 * @param {string} [options.method] - GET, POST, PUT, DELETE
	 * @param {boolean} [options.json=true] - Parse response as JSON
	 * @param {Object} [options.headers] - Headers to be added to the request (will merge with default headers)
	 * @param {boolean} [options.omitAuthorizationHeader] - Omit Authorization header (e.g. for refreshing)
	 * @returns {Promise}
	 */
	apiCall(options = {}) {

		// Extend url
		options.url = url.resolve(this._baseUrl || '', options.uri || options.url || '');
		delete options.uri;

		// Extend default headers
		options.headers = Object.assign(this._requestDefaultHeaders, options.headers || {});
		if (options.omitAuthorizationHeader) options.headers = _.omit(options.headers, 'Authorization');

		// Create error and response handlers
		const webAPIResponseHandler = this.webAPIResponseHandler || ((res) => res);
		const webAPIErrorHandler = this.webAPIErrorHandler || ((err) => err);

		// If ignore error do not add catch
		if (options.ignoreError) {
			return WebAPIUtil.apiCall(options, this._apiCallQueue, this._request)
				.then(webAPIResponseHandler.bind(this));
		}
		return WebAPIUtil.apiCall(options, this._apiCallQueue, this._request)
			.then(webAPIResponseHandler.bind(this))
			.catch(webAPIErrorHandler.bind(this));
	}

	/**
	 * Method that will perform a GET request.
	 * @param {Object} options
	 * @param {string} [options.uri] - Valid uri, or relative uri to apiBaseUrl
	 * @param {boolean} [options.priority] - If API call needs to skip rate limited and throttled queue
	 * @param {boolean} [options.json=true] - Parse response as JSON
	 * @param {Object} [options.headers] - Headers to be added to the request (will merge with default headers)
	 * @returns {Promise}
	 */
	apiCallGet(options = {}) {
		options.method = 'GET';
		return this.apiCall(options).catch(err => {
			this.error('apiCallGet error', err);
			throw err;
		});
	}

	/**
	 * Method that will perform a POST request.
	 * @param {Object} options
	 * @param {string} [options.uri] - Valid uri, or relative uri to apiBaseUrl
	 * @param {boolean} [options.priority] - If API call needs to skip rate limited and throttled queue
	 * @param {boolean} [options.retryOnFail] - When API call fails, retry once
	 * @param {Object} [options.headers] - Headers to be added to the request (will merge with default headers)
	 * @param {Object} data - JSON data to POST
	 * @returns {Promise}
	 */
	apiCallPost(options, data) {
		options.method = 'POST';
		if (typeof data === 'object') {
			options.body = data;
			options.json = true;
		}
		return this.apiCall(options).catch(err => {
			this.error('apiCallPost error', err);
			throw err;
		});
	}

	/**
	 * Method that will perform a PUT request.
	 * @param {Object} options
	 * @param {string} [options.uri] - Valid uri, or relative uri to apiBaseUrl
	 * @param {boolean} [options.priority] - If API call needs to skip rate limited and throttled queue
	 * @param {boolean} [options.retryOnFail] - When API call fails, retry once
	 * @param {Object} [options.headers] - Headers to be added to the request (will merge with default headers)
	 * @param {Object} data - JSON data to POST
	 * @returns {Promise}
	 */
	apiCallPut(options, data) {
		options.method = 'PUT';
		if (typeof data === 'object') {
			options.body = data;
			options.json = true;
		}
		return this.apiCall(options).catch(err => {
			this.error('apiCallPut error', err);
			throw err;
		});
	}

	/**
	 * Method that will perform a DEL request.
	 * @param {Object} options
	 * @param {string} [options.uri] - Valid uri, or relative uri to apiBaseUrl
	 * @param {boolean} [options.priority] - If API call needs to skip rate limited and throttled queue
	 * @param {boolean} [options.retryOnFail] - When API call fails, retry once
	 * @param {boolean} [options.json=true] - Parse response as JSON
	 * @param {Object} [options.headers] - Headers to be added to the request (will merge with default headers)
	 * @returns {Promise}
	 */
	apiCallDel(options = {}) {
		options.method = 'DELETE';
		return this.apiCall(options).catch(err => {
			this.error('apiCallDel error', err);
			throw err;
		});
	}
};

module.exports = WebAPIMixin;
