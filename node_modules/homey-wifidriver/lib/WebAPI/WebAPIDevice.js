'use strict';

const request = require('request-promise-native');

const WifiDevice = require('./../WifiDevice');
const WebAPIMixin = require('./../WebAPI/WebAPIMixin');
const PromiseQueue = require('./../Util/PromiseQueue');

/**
 * The WebAPIDevice class exposes several methods that provide request-like functionality. In addition, all api calls
 * are queued, and if desired throttled and rate limited.
 * @extends WifiDevice
 * @example
 *
 * const WebAPIDevice = require('homey-wifidriver').WebAPIDevice;
 *
 * class myDevice extends WebAPIDevice {
 *      async onInit(){
 *          await super.onInit({
 *              apiBaseUrl: 'http://www.example-api.com/',
 *              throttle: 500, // 500ms between api calls
 *              rateLimit: {
 *                  max: 5,
 *                  per: 60000, // maximum of 5 requests per minute, all exceeding calls will be queued
 *              }
 *          }).catch(err => this.error(err));
 *
 *          this.setDefaultHeaders({
 *              Authorization: 'Bearer 123456789'
 *          });
 *
 *          this.apiCallGet({command: 'testRequest'})
 *              .then(res => {
 *                  console.log(res);
 *              })
 *      }
 * }
 */
class WebAPIDevice extends WebAPIMixin(WifiDevice) {

	/**
	 * This method needs to be called from a device.onInit(), it will create a {@link PromiseQueue} that will be used
	 * for queueing, throttling and rate limiting api calls.
	 * @param {Object} options
	 * @param {string} [options.apiBaseUrl] - Url used for making api calls
	 * @param {number} [options.throttle] - Throttle value, time in ms between api calls
	 * @param {number} [options.rateLimit]
	 * @param {number} [options.rateLimit.max] - Maximum number of api calls per time unit
	 * @param {number} [options.rateLimit.per] - Time unit in ms
	 * @returns {Promise}
	 */
	async onInit(options = {}) {
		await super.onInit(options)
			.catch(err => {
				this.error('Error: WifiDevice onInit', err);
				return Promise.reject();
			});

		this.log('init WebAPIDevice');

		this._request = request;
		this._baseUrl = options.apiBaseUrl || '';
		this._requestDefaultHeaders = options.defaultHeaders || {};

		// Abort queue if it was created before
		if (typeof this._apiCallQueue !== 'undefined') this._apiCallQueue.abort();
		this._apiCallQueue = new PromiseQueue({
			throttle: options.throttle || 0,
			rateLimit: options.rateLimit,
		});
	}

	/**
	 * Method that will be called when device is deleted, it will abort all outstanding api calls.
	 */
	onDeleted() {
		this.log('onDeleted() -> WebAPIDevice');
		super.onDeleted();
		this._apiCallQueue.abort();
	}
}

module.exports = WebAPIDevice;
